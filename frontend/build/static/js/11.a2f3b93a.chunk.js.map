{"version":3,"sources":["views/pages/Blog_Post/ImageUploadAdapter.js","views/pages/Blog_Post/Blog_Post.js"],"names":["ImageUploadAdapter","loader","url","this","Promise","resolve","reject","_initRequest","_initListeners","_sendRequest","xhr","abort","XMLHttpRequest","open","responseType","genericErrorText","file","name","addEventListener","response","console","log","error","message","default","upload","evt","lengthComputable","uploadTotal","total","uploaded","loaded","then","f","data","FormData","append","send","Blog_Post","props","state","isLoading","description","body","user","tags","ageLimit","title","temp","dropDownValue","dropdownOpen","postData","bind","changeValue","toggle","handleChange","handleChangeMuliSelect","setState","e","currentTarget","textContent","event","target","value","fetch","res","json","map","item","JSON","parse","localStorage","getItem","userid","formdata","Blob","stringify","type","processData","contentType","cache","method","params","filter","forEach","includes","className","Row","Col","xs","FormGroup","Input","id","placeholder","onChange","required","options","onSelectOptions","Dropdown","isOpen","DropdownToggle","caret","tag","onClick","data-toggle","aria-expanded","DropdownMenu","DropdownItem","editor","ClassicEditor","onInit","plugins","get","createUploadAdapter","MyUploadAdapter","getData","onBlur","onFocus","style","margin","sm","md","size","offset","Button","color","Component"],"mappings":"4QA8EeA,E,WA5EX,WAAaC,EAAOC,GAAO,oBAEvBC,KAAKF,OAASA,EAIfE,KAAKD,IAAMA,E,qDAIJ,IAAD,OACL,OAAO,IAAIE,SAAS,SAAEC,EAASC,GAC3B,EAAKC,eACL,EAAKC,eAAgBH,EAASC,GAC9B,EAAKG,oB,8BAMJN,KAAKO,KACNP,KAAKO,IAAIC,U,qCAMb,IAAMD,EAAMP,KAAKO,IAAM,IAAIE,eAE3BF,EAAIG,KAAM,OAAQV,KAAKD,KAAK,GAC5BQ,EAAIG,KAAK,OAAO,oCAAmC,GACnDH,EAAII,aAAe,S,qCAIPT,EAASC,GACrB,IAAMI,EAAMP,KAAKO,IACXT,EAASE,KAAKF,OACdc,EAAmB,mCAAgCd,EAAOe,KAAKC,KAA5C,KAEzBP,EAAIQ,iBAAkB,SAAS,kBAAMZ,EAAQS,MAC7CL,EAAIQ,iBAAkB,SAAS,kBAAMZ,OACrCI,EAAIQ,iBAAkB,QAAQ,WAC1B,IAAMC,EAAWT,EAAIS,SAGrB,GAFAC,QAAQC,IAAIF,IAENA,GAAYA,EAASG,MACvB,OAAOhB,EAAQa,GAAYA,EAASG,MAAQH,EAASG,MAAMC,QAAUR,GAKzEV,EAAS,CACLmB,QAASL,EAASjB,SAIrBQ,EAAIe,QACLf,EAAIe,OAAOP,iBAAkB,YAAY,SAAAQ,GAChCA,EAAIC,mBACL1B,EAAO2B,YAAcF,EAAIG,MACzB5B,EAAO6B,SAAWJ,EAAIK,a,qCAOtB,IAAD,OACX5B,KAAKF,OAAOe,KAAKgB,MAAK,SAAAC,GAClB,IAAMC,EAAO,IAAIC,SACjBD,EAAKE,OAAQ,OAAQH,GACrB,EAAKvB,IAAI2B,KAAMH,U,gHC/DrBI,G,0BAEF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,WAAW,EACXP,KAAM,GACNQ,YAAa,KACbC,KAAM,KACNC,KAAM,KACNC,KAAO,KACPC,SAAW,KACXC,MAAQ,KACRC,KAAO,KACPC,cAAe,aACfC,cAAc,GAGlB,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,OAAS,EAAKA,OAAOF,KAAZ,gBACd,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAKI,uBAAyB,EAAKA,uBAAuBJ,KAA5B,gBApBf,E,sEAwBfjD,KAAKsD,SAAS,CACVP,cAAgB/C,KAAKqC,MAAMU,iB,kCAIvBQ,GACRvD,KAAKsD,SAAS,CAAER,cAAeS,EAAEC,cAAcC,YAC9BV,cAAgB/C,KAAKqC,MAAMU,iB,mCAIlCW,GACb,IAAMC,EAASD,EAAMC,OACff,EAAQe,EAAOC,MACRD,EAAO7C,KACpBd,KAAKsD,SAAS,CAACV,Y,iLAMNiB,MAAM,oCACPhC,MAAK,SAAAiC,GAAG,OAAIA,EAAIC,UAChBlC,MAAK,SAAAkC,GACF,IAAIhC,EAAOgC,EAAKC,KAAI,SAAAC,GAAI,MAAK,CAAEnD,KAAMmD,EAAKnD,KAAM8C,MAAOK,EAAKnD,SAC5D,EAAKwC,SAAS,CAAEvB,SAChB,IAAIc,EAAOkB,EACX,EAAKT,SAAS,CAACT,Y,OAEnBJ,EAAOyB,KAAKC,MAAMC,aAAaC,QAAQ,SAC3CrE,KAAKsD,SAAS,CAAEb,SAChBxB,QAAQC,IAAIuB,EAAK6B,Q,8KAYNZ,G,kFACHnB,EAAgBvC,KAAKqC,MAArBE,aACJgC,EAAW,IAAIvC,UACVC,OAAO,OAAQ,IAAIuC,KAAK,CAACN,KAAKO,UAAU,CAC7C,KAAQlC,EACR,MAASvC,KAAKqC,MAAMO,MACpB,SAAY5C,KAAKqC,MAAMS,cACvB,mBAAe9C,KAAKqC,MAAMK,SAE1B,CACIgC,KAAM,mBACNC,aAAa,EAAOC,aAAa,EAAOC,OAAO,KAG/CpC,EAASzC,KAAKqC,MAAdI,K,SACFoB,MAAM,4CAA8CpB,EAAK6B,OAAQ,CACnEQ,OAAQ,OACRtC,KAAM+B,IACP1C,O,oJAGgBkD,GAAS,IAExBrC,EADS1C,KAAKqC,MAAbQ,KACWmC,QAAO,SAAAC,GAAO,OAAIF,EAAOG,SAASD,EAAQnE,SAC1DG,QAAQC,IAAIwB,GACX1C,KAAKsD,SAAS,CAAEZ,SAChBzB,QAAQC,IAAIlB,KAAKqC,MAAMK,Q,+BAElB,IAAD,OACL,OACI,yBAAKyC,UAAU,mBAEX,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACJ,8CACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOd,KAAK,OAAOe,GAAG,QAAQC,YAAY,mBAAmBC,SAAU3F,KAAKoD,aAAcwC,UAAQ,OAK9G,kBAACR,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACJ,mDACA,kBAAC,IAAD,CAAaO,QAAS7F,KAAKqC,MAAMN,KAAM+D,gBAAiB9F,KAAKqD,2BAIrE,kBAAC+B,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACR,uEACA,kBAACS,EAAA,EAAD,CAAUZ,UAAU,aAAaa,OAAQhG,KAAKqC,MAAMU,aAAa,GAAII,OAAQ,WAAO,EAAKA,OAAO,KAC9F,kBAAC8C,EAAA,EAAD,CACEC,OAAK,EACLC,IAAI,OACJC,QAAS,WAAO,EAAKjD,OAAO,IAC5BkD,cAAY,WACZC,gBAAetG,KAAKqC,MAAMU,aAAa,IAEtC/C,KAAKqC,MAAMS,eAEd,kBAACyD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcrB,UAAU,YAAYiB,QAASpG,KAAKkD,aAAlD,cACA,kBAACsD,EAAA,EAAD,CAAcrB,UAAU,YAAYiB,QAASpG,KAAKkD,aAAlD,eACA,kBAACsD,EAAA,EAAD,CAAcrB,UAAU,YAAYiB,QAASpG,KAAKkD,aAAlD,oBAMJ,sDACA,kBAAC,IAAD,CACIuD,OAAQC,IACR3E,KAAK,wBACL4E,OAAQ,SAAAF,GACJA,EAAOG,QAAQC,IAAI,kBAAkBC,oBAAsB,SAAChH,GAExD,OAAO,IAAIiH,EAAgBjH,EAAQ,qCAGvCmB,QAAQC,IAAI,0BAA2BuF,IAE3Cd,SAAU,SAACjC,EAAO+C,GACd,IAAM1E,EAAO0E,EAAOO,UACdzE,EAAckE,EAAOO,UAC3B,EAAK1D,SAAS,CAAEf,gBAEhBtB,QAAQC,IAAI,CAAEwC,QAAO+C,SAAQ1E,UAEjCkF,OAAQ,SAACvD,EAAO+C,GACZxF,QAAQC,IAAI,QAASuF,IAEzBS,QAAS,SAACxD,EAAO+C,GACbxF,QAAQC,IAAI,SAAUuF,MAM9B,yBAAKU,MAAO,CAACC,OAAO,SAEhB,kBAAChC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKgC,GAAG,KAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAChC,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUvC,UAAU,OAAOiB,QAASpG,KAAKgD,UAAvD,gB,GA5KJ2E,cAsLTxF","file":"static/js/11.a2f3b93a.chunk.js","sourcesContent":["class ImageUploadAdapter {\r\n    \r\n    constructor( loader,url ) {\r\n        // CKEditor 5's FileLoader instance.\r\n        this.loader = loader;\r\n\r\n        // URL where to send files.\r\n       // this.url = '/uploadFile';\r\n       this.url = url;\r\n    }\r\n\r\n    // Starts the upload process.\r\n    upload() {\r\n        return new Promise( ( resolve, reject ) => {\r\n            this._initRequest();\r\n            this._initListeners( resolve, reject );\r\n            this._sendRequest();\r\n        } );\r\n    }\r\n\r\n    // Aborts the upload process.\r\n    abort() {\r\n        if ( this.xhr ) {\r\n            this.xhr.abort();\r\n        }\r\n    }\r\n\r\n    // Example implementation using XMLHttpRequest.\r\n    _initRequest() {\r\n        const xhr = this.xhr = new XMLHttpRequest();\r\n\r\n        xhr.open( 'POST', this.url, true );\r\n        xhr.open('POST','http://localhost:8081/uploadFile',true)\r\n        xhr.responseType = 'json';\r\n    }\r\n\r\n    // Initializes XMLHttpRequest listeners.\r\n    _initListeners( resolve, reject ) {\r\n        const xhr = this.xhr;\r\n        const loader = this.loader;\r\n        const genericErrorText = 'Couldn\\'t upload file:' + ` ${ loader.file.name }.`;\r\n\r\n        xhr.addEventListener( 'error', () => reject( genericErrorText ) );\r\n        xhr.addEventListener( 'abort', () => reject() );\r\n        xhr.addEventListener( 'load', () => {\r\n            const response = xhr.response;\r\n            console.log(response);\r\n            \r\n            if ( !response || response.error ) {\r\n                return reject( response && response.error ? response.error.message : genericErrorText );\r\n            }\r\n\r\n            // If the upload is successful, resolve the upload promise with an object containing\r\n            // at least the \"default\" URL, pointing to the image on the server.\r\n            resolve( {\r\n                default: response.url\r\n            } );\r\n        } );\r\n\r\n        if ( xhr.upload ) {\r\n            xhr.upload.addEventListener( 'progress', evt => {\r\n                if ( evt.lengthComputable ) {\r\n                    loader.uploadTotal = evt.total;\r\n                    loader.uploaded = evt.loaded;\r\n                }\r\n            } );\r\n        }\r\n    }\r\n\r\n    // Prepares the data and sends the request.\r\n    _sendRequest() {\r\n        this.loader.file.then(f=>{\r\n            const data = new FormData();\r\n            data.append( 'file', f);\r\n            this.xhr.send( data );\r\n        });\r\n    }\r\n}\r\nexport default ImageUploadAdapter;","import React, { Component } from 'react';\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport MyUploadAdapter from './ImageUploadAdapter';\r\nimport Multiselect from 'multiselect-dropdown-react';\r\nimport { MDBSelect } from \"mdbreact\";\r\nimport { Button, FormGroup, Label, Card, CardBody, CardFooter, Col, Container, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row } from 'reactstrap';\r\nimport { ButtonDropdown,Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport { tsImportEqualsDeclaration } from '@babel/types';\r\nimport \"./Blog_Post.css\";\r\n\r\nclass Blog_Post extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            data: [],\r\n            description: null,\r\n            body: null,\r\n            user: null,\r\n            tags : null,\r\n            ageLimit : null,\r\n            title : null,\r\n            temp : null,\r\n            dropDownValue: 'Select One',\r\n            dropdownOpen: false\r\n        }\r\n\r\n        this.postData = this.postData.bind(this);\r\n        this.changeValue = this.changeValue.bind(this);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleChangeMuliSelect = this.handleChangeMuliSelect.bind(this);\r\n    } \r\n    \r\n    toggle(){\r\n        this.setState({\r\n            dropdownOpen : !this.state.dropdownOpen\r\n        });\r\n    }\r\n\r\n    changeValue(e) {\r\n        this.setState({ dropDownValue: e.currentTarget.textContent,\r\n                         dropdownOpen : !this.state.dropdownOpen });\r\n    }\r\n\r\n\r\n     handleChange(event){\r\n     const target = event.target;\r\n     const title = target.value;\r\n     const name = target.name;\r\n     this.setState({title});\r\n     \r\n   }\r\n\r\n\r\n    async componentDidMount() {\r\n        await fetch(`http://localhost:8081/getAllTags`)\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                let data = json.map(item => ({ name: item.name, value: item.name }));\r\n                this.setState({ data });\r\n                let temp = json;\r\n                this.setState({temp});\r\n            });\r\n        var user = JSON.parse(localStorage.getItem('user'));\r\n        this.setState({ user });\r\n        console.log(user.userid);\r\n\r\n        // await fetch(`http://localhost:8081/blog/getOne/9`)\r\n        // .then(res => res.json())\r\n        // .then(json => { \r\n        //     let body = json.body; \r\n        //     this.setState({body})\r\n\r\n        // });\r\n        // console.log(this.state.body);\r\n    }\r\n\r\n    async postData(event) {\r\n        const { description } = this.state;\r\n        var formdata = new FormData();\r\n        formdata.append(\"post\", new Blob([JSON.stringify({\r\n            \"body\": description,\r\n            \"title\": this.state.title,\r\n            \"ageLimit\": this.state.dropDownValue,\r\n            \"taging\" : [...this.state.tags]\r\n        })],\r\n            {\r\n                type: \"application/json\",\r\n                processData: false, contentType: false, cache: false\r\n            }));\r\n\r\n        const { user } = this.state;\r\n        await fetch(`http://localhost:8081/blog/create?userID=` + user.userid, {\r\n            method: 'POST',\r\n            body: formdata\r\n        }).then()\r\n    }\r\n\r\n    handleChangeMuliSelect(params) {\r\n        let {temp} = this.state;\r\n        let tags = temp.filter(forEach => params.includes(forEach.name));\r\n        console.log(tags);\r\n         this.setState({ tags });\r\n         console.log(this.state.tags);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"animated fadeIn\">\r\n                {/* <h3>Give a title:</h3> */}\r\n                <Row>\r\n                    <Col xs=\"12\">\r\n                        <h5>Give a title: </h5>\r\n                        <FormGroup>\r\n                            <Input type=\"text\" id=\"Title\" placeholder=\"Write Your Title\" onChange={this.handleChange} required />\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col xs=\"12\">\r\n                        <h5>Select a category: </h5>\r\n                        <Multiselect options={this.state.data} onSelectOptions={this.handleChangeMuliSelect} />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                <Col xs=\"12\">\r\n                <h5>Slect suitable time-span for the post: </h5>\r\n                <Dropdown className=\"hover-drop\" isOpen={this.state.dropdownOpen[3]} toggle={() => {this.toggle(3);}}>\r\n                  <DropdownToggle\r\n                    caret\r\n                    tag=\"span\"\r\n                    onClick={() => {this.toggle(0);}}\r\n                    data-toggle=\"dropdown\"\r\n                    aria-expanded={this.state.dropdownOpen[3]}\r\n                  >\r\n                    {this.state.dropDownValue}\r\n                  </DropdownToggle>\r\n                  <DropdownMenu>\r\n                    <DropdownItem className=\"drop-item\" onClick={this.changeValue}>1-10 Weeks</DropdownItem>\r\n                    <DropdownItem className=\"drop-item\" onClick={this.changeValue}>11-20 Weeks</DropdownItem>\r\n                    <DropdownItem className=\"drop-item\" onClick={this.changeValue}>21-30 Weeks </DropdownItem>\r\n                  </DropdownMenu>\r\n                </Dropdown>\r\n                </Col>\r\n                </Row>\r\n\r\n                <h5>Write your post here: </h5>\r\n                <CKEditor\r\n                    editor={ClassicEditor}\r\n                    data=\"<p>Start here...!</p>\"\r\n                    onInit={editor => {\r\n                        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {\r\n                            // Configure the URL to the upload script in your back-end here!\r\n                            return new MyUploadAdapter(loader, 'http://localhost:8081/uploadFile');\r\n                        };\r\n                        // You can store the \"editor\" and use when it is needed.\r\n                        console.log('Editor is ready to use!', editor);\r\n                    }}\r\n                    onChange={(event, editor) => {\r\n                        const data = editor.getData();\r\n                        const description = editor.getData();\r\n                        this.setState({ description });\r\n                        // console.log(this.state.description)\r\n                        console.log({ event, editor, data });\r\n                    }}\r\n                    onBlur={(event, editor) => {\r\n                        console.log('Blur.', editor);\r\n                    }}\r\n                    onFocus={(event, editor) => {\r\n                        console.log('Focus.', editor);\r\n                    }}\r\n                />\r\n                {/* <div className=\"center\">\r\n                <Button color=\"success\" onClick = {this.postData}>Post</Button>\r\n                </div> */}\r\n                <div style={{margin:'10px'}}>\r\n\r\n                    <Row>\r\n                        <Col sm=\"16\" md={{ size: 6, offset: 4 }}>\r\n                            <Button color=\"primary\" className=\"px-4\" onClick={this.postData}>Post</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {/* <div dangerouslySetInnerHTML={ { __html: this.state.body } }></div> */}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Blog_Post;"],"sourceRoot":""}