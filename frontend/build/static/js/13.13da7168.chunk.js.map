{"version":3,"sources":["views/pages/Register/Register.js"],"names":["Register","useForm","register","handleSubmit","setValue","errors","onSubmit","data","a","alert","JSON","stringify","formdata","FormData","append","Blob","type","processData","contentType","cache","fetch","method","body","useState","Date","startDate","setStartDate","useEffect","name","className","md","lg","xl","addonType","placeholder","autoComplete","innerRef","required","selected","onChange","date","color"],"mappings":"mVA+IeA,UApIf,WAAqB,IAAD,EACkCC,cAA5CC,EADU,EACVA,SAAUC,EADA,EACAA,aAAsBC,GADtB,EACcC,OADd,EACsBD,UAClCE,EAAQ,uCAAG,WAAMC,GAAN,eAAAC,EAAA,6DACfC,MAAMC,KAAKC,UAAUJ,EAAM,QACvBK,EAAW,IAAIC,UAETC,OAAO,OAAO,IAAIC,KAAK,CAACL,KAAKC,UAAUJ,IAChD,CACCS,KAAM,mBACNC,aAAa,EAAOC,aAAa,EAAOC,OAAO,KAPlC,SAURC,MAAM,gBAAgB,CAC1BC,OAAS,OACTC,KAAOV,IAZK,2CAAH,sDAFI,EAkBgBW,mBAAS,IAAIC,MAlB7B,mBAkBXC,EAlBW,KAkBAC,EAlBA,KAgFhB,OArDFC,qBAAU,WACRzB,EAAS,CAAE0B,KAAM,cAChB,IAoDC,yBAAKC,UAAU,mCACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKA,UAAU,0BACb,kBAAC,IAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACpB,kBAAC,IAAD,CAAMH,UAAU,QACd,kBAAC,IAAD,CAAUA,UAAU,OAClB,kBAAC,IAAD,CAAMvB,SAAUH,EAAaG,IAC3B,wCACA,uBAAGuB,UAAU,cAAb,uBACA,kBAAC,IAAD,CAAYA,UAAU,QACpB,kBAAC,IAAD,CAAiBI,UAAU,WACzB,kBAAC,IAAD,KACE,uBAAGJ,UAAU,gBAGjB,kBAAC,IAAD,CAAOb,KAAK,OAAOY,KAAK,OAAOM,YAAY,WAAWC,aAAa,WAAWC,SAAUlC,EAAS,CAAEmC,UAAU,OAE/G,kBAAC,IAAD,CAAYR,UAAU,QACpB,kBAAC,IAAD,CAAiBI,UAAU,WACzB,kBAAC,IAAD,WAEF,kBAAC,IAAD,CAAOjB,KAAK,OAAOY,KAAK,QAAQM,YAAY,QAAQC,aAAa,QAAQC,SAAUlC,EAAS,CAAEmC,UAAU,OAE1G,kBAAC,IAAD,CAAYR,UAAU,QACpB,kBAAC,IAAD,CAAiBI,UAAU,WACzB,kBAAC,IAAD,KACE,uBAAGJ,UAAU,gBAGjB,kBAAC,IAAD,CAAOb,KAAK,WAAWY,KAAK,WAAWM,YAAY,WAAWC,aAAa,eAAeC,SAAUlC,EAAS,CAAEmC,UAAU,OAE3H,kBAAC,IAAD,CAAYR,UAAU,QACtB,kBAAC,IAAD,CAAiBI,UAAU,WACvB,kBAAC,IAAD,KACE,uBAAGJ,UAAU,oBAGjB,kBAAC,IAAD,CAAYD,KAAK,UAAUU,SAAUb,EAAWc,SAlGhD,SAAAC,GAElBd,EAAac,GAEbpC,EAAS,UAAWoC,IA8FqEJ,SAAUlC,KAGnF,kBAAC,IAAD,CAAQuC,MAAM,WAAd","file":"static/js/13.13da7168.chunk.js","sourcesContent":["import React, { Component, useState,useEffect } from 'react';\r\nimport { Button, Card, CardBody, CardFooter, Col, Container, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row } from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { FormGroup, Label} from 'reactstrap';\r\nimport 'react-dates/initialize';\r\nimport 'react-dates/lib/css/_datepicker.css';\r\n\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport useForm from 'react-hook-form';\r\n\r\nfunction Register() {\r\n  const { register, handleSubmit, errors ,setValue} = useForm(); // initialise the hook\r\n  const onSubmit = async(data) => {\r\n    alert(JSON.stringify(data, null));\r\n    var formdata = new FormData();\r\n\r\n     formdata.append(\"user\",new Blob([JSON.stringify(data)],\r\n     {\r\n      type: \"application/json\",\r\n      processData: false, contentType: false, cache: false\r\n  })); \r\n  \r\n     await fetch(`/registration`,{\r\n       method : 'POST',\r\n       body : formdata\r\n     })\r\n  };\r\n \r\n  const [startDate, setStartDate] = useState(new Date());\r\n\r\n  const hanleChange = date => {\r\n    //const tt = date.format();\r\n    setStartDate(date);\r\n    //alert(startDate)\r\n    setValue(\"dueDate\", date);\r\n  };\r\n\r\n  useEffect(() => {\r\n    register({ name: \"dueDate\" });\r\n  }, []);\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state ={\r\n  //     date: new Date(),\r\n  //     focused: null,\r\n  //     isLoading : true,\r\n  //     dataBody : []\r\n  //   }\r\n  //   this.handleSubmit = this.handleSubmit.bind(this);\r\n  //   this.handleChange = this.handleChange.bind(this);\r\n  //   this.handleDateChange = this.handleDateChange.bind(this);\r\n  // }\r\n  \r\n  // async componentDidMount(){\r\n  //   this.setState({\r\n  //     isLoading : false\r\n  //   })\r\n  //  }\r\n\r\n  //  async handleSubmit(event){\r\n  //  //  event.preventDefailt();\r\n  //    const {dataBody} = this.state;\r\n  //    var formdata = new FormData();\r\n\r\n  //    formdata.append(\"user\",new Blob([JSON.stringify(dataBody)],\r\n  //    {\r\n  //     type: \"application/json\",\r\n  //     processData: false, contentType: false, cache: false\r\n  // }));\r\n  \r\n  //    await fetch(`/registration`,{\r\n  //      method : 'POST',\r\n  //      body : formdata\r\n  //    })\r\n  //  }\r\n\r\n  //  handleChange(event){\r\n  //    const target = event.target;\r\n  //    const value = target.value;\r\n  //    const name = target.name;\r\n  //    let dataBody = {...this.state.dataBody};\r\n  //    dataBody[name] = value;\r\n  //    this.setState({dataBody});\r\n  //    console.log(this.state);\r\n  //  }\r\n\r\n  // handleDateChange(date){\r\n  //   date = date;\r\n  // }\r\n \r\n    return (\r\n      <div className=\"app flex-row align-items-center\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md=\"9\" lg=\"7\" xl=\"6\">\r\n              <Card className=\"mx-4\">\r\n                <CardBody className=\"p-4\">\r\n                  <Form onSubmit={handleSubmit(onSubmit)}>\r\n                    <h1>Register</h1>\r\n                    <p className=\"text-muted\">Create your account</p>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>\r\n                          <i className=\"icon-user\"></i>\r\n                        </InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input type=\"text\" name=\"name\" placeholder=\"Username\" autoComplete=\"username\" innerRef={register({ required: true })} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>@</InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input type=\"text\" name=\"email\" placeholder=\"Email\" autoComplete=\"email\" innerRef={register({ required: true })} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>\r\n                          <i className=\"icon-lock\"></i>\r\n                        </InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input type=\"password\" name=\"password\" placeholder=\"Password\" autoComplete=\"new-password\" innerRef={register({ required: true })}/>\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-4\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>\r\n                          <i className=\"icon-calendar\"></i>\r\n                        </InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <DatePicker name=\"dueDate\" selected={startDate} onChange={hanleChange} innerRef={register}  />\r\n                      {}\r\n                    </InputGroup>\r\n                    <Button color=\"success\" >Create Account</Button>\r\n                  </Form>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Register;"],"sourceRoot":""}